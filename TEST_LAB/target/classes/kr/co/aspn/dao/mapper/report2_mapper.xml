<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="report2">
	<select id="selectDesignSeq" resultType="int">
	/*	report2.selectDesignSeq */
		SELECT FN_NEXTVAL('design_seq') as seq
	</select>
	
	<insert id="insertDesign" parameterType="map">
	/*	report2.insertDesign */
		INSERT INTO lab_design(
			DESIGN_IDX
			, PRODUCT_CODE
			, SAP_CODE
			, TITLE
			, PRODUCT_NAME
			, CHANGE_COMMENT
			, CHANGE_TIME
			, CONTENTS
			, VERSION_NO
			, IS_DELETE
			, IS_LAST
			, STATUS
			, REG_USER
			, DOC_OWNER			
		)VALUES(
			#{idx}
			, #{productCode}
			, #{productSapCode}
			, #{title}
			, #{productName}
			, #{changeComment}
			, #{changeTime}
			, #{contents}
			, 1
			, 'N'
			, 'Y'
			, #{status}
			, #{userId}
			, #{userId}			
		)
	</insert>
	
	<insert id="insertChangeList" parameterType="map">
	/*	report2.insertChangeList */
		INSERT 
    	INTO lab_design_change_info(
			CHANGE_IDX
			, DESIGN_IDX
			, ITEM_DIV
			, ITEM_CURRENT
			, ITEM_CHANGE
			, ITEM_NOTE
			, ORDER_NO
		)values
		<foreach collection="changeList" item="item" index="index"  separator=",">
		( FN_NEXTVAL('design_change_info_seq'), #{idx}, #{item.itemDiv}, #{item.itemCurrent}, #{item.itemChange}, #{item.itemNote} , ${index+1} )
		</foreach>
	</insert>
	
	<sql id="whereDesignList">
		<if test="searchType != null and searchType != '' ">
		<choose>
			<when test="searchType.equals('searchName')">
			AND PRODUCT_NAME LIKE CONCAT('%',#{searchValue},'%')
			</when>
      		<when test="searchType.equals('searchTitle')">
      		AND TITLE LIKE CONCAT('%',#{searchValue},'%')
      		</when>
      	</choose>
		</if>
		<if test="searchFileTxt != null and searchFileTxt != '' ">
			AND DESIGN_IDX IN (SELECT distinct DOC_IDX FROM lab_file WHERE 1 = 1 AND DOC_TYPE = 'DESIGN' AND FILE_CONTENT LIKE CONCAT('%',#{searchFileTxt},'%'))
		</if>
	</sql>
	
	<sql id="whereNewProductResultList">
		<if test="searchType != null and searchType != '' ">
			<choose>
				<when test="searchType.equals('searchTitle')">
					AND TITLE LIKE CONCAT('%', #{searchValue}, '%')
				</when>
				<when test="searchType.equals('searchDate')">
					AND DATE_FORMAT(EXCUTE_DATE, '%Y-%m') = #{searchValue}
				</when>
			</choose>
		</if>
		<if test="searchFileTxt != null and searchFileTxt != '' ">
			AND RESULT_IDX IN (SELECT distinct DOC_IDX FROM lab_file WHERE 1 = 1 AND DOC_TYPE = 'RESULT' AND FILE_CONTENT LIKE CONCAT('%',#{searchFileTxt},'%'))
		</if>
	</sql>
	
	<select id="selectDesignCount" parameterType="map" resultType="int">
	/*	report2.selectDesignCount */
		SELECT
			COUNT(DESIGN_IDX) as cnt
		FROM 	
			lab_design
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			AND IS_DELETE = 'N'
			AND IS_LAST = 'Y'
			<include refid="report2.whereDesignList" />
	</select>
	
	<select id="selectDesignList" parameterType="map" resultType="hashmap">
	/*	report2.selectDesignList */
		SELECT
			tmp.*
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  DESIGN_IDX DESC) as rnum
				, DESIGN_IDX
				, PRODUCT_CODE
				, SAP_CODE
				, TITLE
				, PRODUCT_NAME
				, CHANGE_COMMENT
				, CHANGE_TIME
				, CONTENTS
				, VERSION_NO
				, IS_DELETE
				, IS_LAST
				, STATUS
				, REG_USER
				, DOC_OWNER
			FROM 	
				lab_design
			WHERE 1 = 1
				AND DOC_OWNER = #{userId}
				AND IS_DELETE = 'N'
				AND IS_LAST = 'Y'
				<include refid="report2.whereDesignList" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}		
	</select>
	
	<select id="selectDesignData" parameterType="map" resultType="hashmap">
	/*	report2.selectDesignData */
		SELECT
			DESIGN_IDX
			, PRODUCT_CODE
			, SAP_CODE
			, TITLE
			, PRODUCT_NAME
			, CHANGE_COMMENT
			, CHANGE_TIME
			, CONTENTS
			, VERSION_NO
			, IS_DELETE
			, IS_LAST
			, STATUS
			, REG_USER
			, DOC_OWNER
			, TITLE
		FROM 
			lab_design
		WHERE 1 = 1
			AND DESIGN_IDX = #{idx}
	</select>
	
	<select id="selectDesignChangeList" parameterType="map" resultType="hashmap">
	/*	report2.selectDesignChangeList */
		SELECT
			CHANGE_IDX
			, DESIGN_IDX
			, ITEM_DIV
			, ITEM_CURRENT
			, ITEM_CHANGE
			, ITEM_NOTE
			, ORDER_NO
		FROM
			lab_design_change_info
		WHERE 1 = 1
			AND DESIGN_IDX = #{idx}
		ORDER BY ORDER_NO ASC	
	</select>
	
	<select id="selectHistory" parameterType="map" resultType="hashmap">
	/* report2.selectHistory */
	SELECT 
		lh.DOC_IDX
		, lh.HISTORY_TYPE
		, CASE WHEN lh.HISTORY_TYPE  = 'I' then '등록'
			WHEN lh.HISTORY_TYPE  = 'V' then '개정'
			WHEN lh.HISTORY_TYPE  = 'D' then '삭제'
			WHEN lh.HISTORY_TYPE  = 'U' then '수정'
			END HISTORY_TYPE_TXT 
		,<choose>
			<when test="docType.equals('DESIGN')">
			rt.PRODUCT_NAME 
			</when> 
			<when test="docType.equals('TRIP')">
			rt.TITLE
			</when>
			<when test="docType.equals('PLAN')">
			rt.TITLE
			</when>
			<when test="docType.equals('RESEARCH')">
			rt.TITLE
			</when>
		</choose>
			AS TITLE
		, lh.USER_ID 
		, (SELECT USER_NAME FROM lab_user u WHERE 1 = 1 AND u.USER_ID = lh.USER_ID) as USER_NAME
		, DATE_FORMAT(lh.REG_DATE, '%Y-%m-%d %H:%i:%s') as REG_DATE
	FROM lab_history lh ,
	<choose>
		<when test="docType.equals('DESIGN')">
		lab_design rt
		</when> 
		<when test="docType.equals('TRIP')">
		lab_business_trip rt
		</when>
		<when test="docType.equals('PLAN')">
		lab_business_trip_plan rt
		</when>
		<when test="docType.equals('RESEARCH')">
		lab_market_research rt
		</when>
	</choose>	
	WHERE 1 = 1
		AND lh.DOC_IDX = #{idx}
		AND lh.DOC_TYPE = #{docType}
		<choose>
			<when test="docType.equals('DESIGN')">
			AND lh.DOC_IDX = rt.DESIGN_IDX 
			</when> 
			<when test="docType.equals('TRIP')">
			AND lh.DOC_IDX = rt.TRIP_IDX 
			</when>
			<when test="docType.equals('PLAN')">
			AND lh.DOC_IDX = rt.PLAN_IDX 
			</when>
			<when test="docType.equals('RESEARCH')">
			AND lh.DOC_IDX = rt.RESEARCH_IDX 
			</when>
		</choose>		
	ORDER BY lh.REG_DATE ASC
	</select>
	
	<update id="updateDesign" parameterType="map">
	/*	report2.updateDesign */
		UPDATE 
			lab_design
		SET 
			PRODUCT_CODE = #{productCode}
			, SAP_CODE = #{productSapCode}
			, TITLE = #{title}
			, PRODUCT_NAME = #{productName}
			, CHANGE_COMMENT = #{changeComment}
			, CHANGE_TIME = #{changeTime}
			, CONTENTS = #{contents}
			<if test="status != null and status != '' ">
			, STATUS = #{status}
			</if>
		WHERE 1 = 1
			AND DESIGN_IDX = #{idx}	
	</update>
	
	<delete id="deleteChangeList" parameterType="map">
	/*	report2.deleteChangeList */
		DELETE
		FROM lab_design_change_info
		WHERE 1 = 1
			AND DESIGN_IDX = #{idx}
	</delete>
	
	<sql id="whereBusinessTrip">
		<if test="searchType != null and searchType != '' ">
		<choose>
      		<when test="searchType.equals('searchTitle')">
      		AND TITLE LIKE CONCAT('%',#{searchValue},'%')
      		</when>
      	</choose>
		</if>
		<if test="searchFileTxt != null and searchFileTxt != '' ">
			AND TRIP_IDX IN (SELECT distinct DOC_IDX FROM lab_file WHERE 1 = 1 AND DOC_TYPE = 'TRIP' AND FILE_CONTENT LIKE CONCAT('%',#{searchFileTxt},'%'))
		</if>
	</sql>
	
	<select id="selectBusinessTripCount" parameterType="map" resultType="int">
	/*	report2.selectBusinessTripCount */
		SELECT
			count(TRIP_IDX) as cnt
		FROM
			lab_business_trip
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			<include refid="report2.whereBusinessTrip" />			
	</select>
	
	<select id="selectBusinessTripList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripList */
		SELECT
			tmp.*
			, CASE 
				WHEN tmp.TRIP_TYPE = 'I' THEN '국내'
				WHEN tmp.TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'TMP' THEN '임시저장'
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  TRIP_IDX DESC) as rnum
				, TRIP_IDX
				, TRIP_TYPE
				, TITLE
				, TRIP_START_DATE
				, TRIP_END_DATE
				, TRIP_TRANSIT
				, TRIP_CONTENTS
				, TRIP_COST
				, OVER_REASON
				, TRIP_EFFECT
				, REG_USER
				, DOC_OWNER
				, STATUS
				, IS_LAST
				, IS_DELETE
				, VERSION_NO
			FROM 	
				lab_business_trip
			WHERE 1 = 1
				AND DOC_OWNER = #{userId}
				AND IS_DELETE = 'N'
				AND IS_LAST = 'Y'
				<include refid="report2.whereBusinessTrip" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}
	</select>
	
	<select id="selectTripSeq" resultType="int">
		/*	report2.selectTripSeq */
		SELECT FN_NEXTVAL('business_trip_seq') as seq
	</select>
	
	<insert id="insertBusinessTrip" parameterType="map">
	/*	report2.insertBusinessTrip */
		INSERT INTO lab_business_trip(
			TRIP_IDX
			, PLAN_IDX
			, TRIP_TYPE
			, TITLE
			, TRIP_START_DATE
			, TRIP_END_DATE
			, TRIP_TRANSIT
			, TRIP_CONTENTS
			, TRIP_COST
			, OVER_REASON
			, TRIP_EFFECT
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO	
		)VALUES(
			#{idx}
			, #{planIdx}
			, #{tripType}
			, #{title}
			, #{tripStartDate}
			, #{tripEndDate}
			, #{tripTransit}
			, #{tripContents}
			, #{tripCost}
			, #{overReason}
			, #{tripEffect}
			, #{userId}
			, #{userId}
			, #{status}
			, 'Y'
			, 'N'
			, 1		
		)
	</insert>
	
	<select id="selectBusinessTripData" parameterType="map" resultType="hashmap">
		SELECT
			TRIP_IDX
			, PLAN_IDX
			, TRIP_TYPE
			, CASE 
				WHEN TRIP_TYPE = 'I' THEN '국내'
				WHEN TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, TITLE
			, TRIP_START_DATE
			, TRIP_END_DATE
			, TRIP_TRANSIT
			, TRIP_CONTENTS
			, TRIP_COST
			, OVER_REASON
			, TRIP_EFFECT
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO
		FROM
			lab_business_trip
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}		
	</select>
	
	<update id="updateBusinessTrip" parameterType="map">
		UPDATE 
			lab_business_trip
		SET 
			PLAN_IDX = #{planIdx}
			, TRIP_TYPE = #{tripType}
			, TITLE = #{title}
			, TRIP_START_DATE = #{tripStartDate}
			, TRIP_END_DATE = #{tripEndDate}
			, TRIP_TRANSIT = #{tripTransit}
			, TRIP_CONTENTS = #{tripContents}
			, TRIP_COST = #{tripCost}
			, OVER_REASON = #{overReason}
			, TRIP_EFFECT = #{tripEffect}
			<if test="status != null and status != '' ">
			, STATUS = #{status}
			</if>
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
	</update>
	
	<select id="searchBusinessTripPlanList" parameterType="map" resultType="hashmap">
		/*	report2.searchBusinessTripPlanList */
		SELECT
			PLAN_IDX
			, TRIP_TYPE
			, CASE 
				WHEN TRIP_TYPE = 'I' THEN '국내'
				WHEN TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, TITLE
			, TRIP_START_DATE
			, TRIP_END_DATE
			, TRIP_TRANSIT
			, TRIP_COST
			, CAL_METHOD
			, TRIP_EFFECT
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO
		FROM 	
			lab_business_trip_plan
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			AND IS_DELETE = 'N'
			AND IS_LAST = 'Y'
			<if test="searchValue != null and searchValue != '' ">
			AND ( 
		 		TITLE LIKE CONCAT('%',#{searchValue},'%') 
		 		OR TRIP_EFFECT LIKE CONCAT('%',#{searchValue},'%') 
		 		OR PLAN_IDX IN (SELECT distinct PLAN_IDX FROM lab_business_trip_plan_add_info WHERE 1 = 1 AND (INFO_TYPE = 'PUR' OR INFO_TYPE = 'DEST') AND INFO_TEXT LIKE CONCAT('%',#{searchValue},'%') )
		 	)
		 	</if>
			<if test="tripDiv != null and tripDiv != '' ">
			AND TRIP_DIV = #{tripDiv}
			</if>
	</select>
	
	<select id="searchNewProductResultListAjax" parameterType="map" resultType="hashmap">
		/*	report2.searchNewProductResultListAjax */
		SELECT
			RESULT_IDX
			, TITLE
			, EXCUTE_DATE
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_DELETE
		FROM 	
			lab_new_product_result
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			AND IS_DELETE = 'N'
			AND TITLE LIKE CONCAT('%',#{searchValue},'%')
	</select>
	
	<sql id="whereBusinessTripPlan">
		<if test="searchType != null and searchType != '' ">
		<choose>
			<when test="searchType.equals('searchName')">
			AND PRODUCT_NAME LIKE CONCAT('%',#{searchValue},'%')
			</when>
      		<when test="searchType.equals('searchTitle')">
      		AND TITLE LIKE CONCAT('%',#{searchValue},'%')
      		</when>
      	</choose>
		</if>
		<if test="searchFileTxt != null and searchFileTxt != '' ">
			AND DESIGN_IDX IN (SELECT distinct DOC_IDX FROM lab_file WHERE 1 = 1 AND DOC_TYPE = 'DESIGN' AND FILE_CONTENT LIKE CONCAT('%',#{searchFileTxt},'%'))
		</if>
	</sql>
	
	<select id="selectBusinessTripPlanCount" parameterType="map" resultType="int">
	/*	report2.selectBusinessTripPlanCount */
		SELECT
			count(PLAN_IDX) as cnt
		FROM
			lab_business_trip_plan
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			<include refid="report2.whereBusinessTripPlan" />			
	</select>
	
	<select id="selectBusinessTripPlanList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripPlanList */
		SELECT
			tmp.*
			, CASE 
				WHEN tmp.TRIP_TYPE = 'I' THEN '국내'
				WHEN tmp.TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, CASE 
				WHEN tmp.TRIP_DIV = 'T' THEN '출장'
				WHEN tmp.TRIP_DIV = 'R' THEN '시장조사'
				END	AS TRIP_DIV_TXT	
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'TMP' THEN '임시저장'
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  PLAN_IDX DESC) as rnum
				, PLAN_IDX
				, TRIP_TYPE
				, TRIP_DIV
				, TITLE
				, TRIP_START_DATE
				, TRIP_END_DATE
				, TRIP_TRANSIT
				, TRIP_COST
				, CAL_METHOD
				, TRIP_EFFECT
				, REG_USER
				, DOC_OWNER
				, STATUS
				, IS_LAST
				, IS_DELETE
				, VERSION_NO	
			FROM 	
				lab_business_trip_plan
			WHERE 1 = 1
				AND DOC_OWNER = #{userId}
				AND IS_DELETE = 'N'
				AND IS_LAST = 'Y'
				<include refid="report2.whereBusinessTripPlan" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}
	</select>
	
	<select id="selectTripPlanSeq" resultType="int">
		/*	report2.selectTripPlanSeq */
		SELECT FN_NEXTVAL('business_trip_plan_seq') as seq
	</select>
	
	<insert id="insertBusinessTripPlan" parameterType="map">
	/*	report2.insertBusinessTripPlan */
		INSERT INTO lab_business_trip_plan(
			PLAN_IDX
			, TRIP_TYPE
			, TRIP_DIV
			, TITLE
			, TRIP_START_DATE
			, TRIP_END_DATE
			, TRIP_TRANSIT
			, TRIP_COST
			, CAL_METHOD
			, TRIP_EFFECT
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO			
		)VALUES(
			#{idx}
			, #{tripType}
			, #{tripDiv}
			, #{title}
			, #{tripStartDate}
			, #{tripEndDate}
			, #{tripTransit}
			, #{tripCost}
			, #{calMethod}
			, #{tripEffect}
			, #{userId}
			, #{userId}
			, #{status}
			, 'Y'
			, 'N'
			, 1		
		)
	</insert>
	
	<insert id="insertBusinessTripPlanUser" parameterType="list">
		/*	report2.insertBusinessTripPlanUser */
		INSERT
		INTO lab_business_trip_plan_user(
			PLAN_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.dept}, #{item.position}, #{item.name} )
		</foreach>
	</insert>
	
	<insert id="insertBusinessTripPlanAddInfo" parameterType="list">
		/*	report2.insertBusinessTripPlanAddInfo */
		INSERT
		INTO lab_business_trip_plan_add_info(
			PLAN_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.infoType}, #{item.infoText} )
		</foreach>
	</insert>
	
	<insert id="insertBusinessTripPlanContents" parameterType="list">
		/*	report2.insertBusinessTripPlanContents */
		INSERT
		INTO lab_business_trip_plan_contents(
			PLAN_IDX
			, DISPLAY_ORDER
			, SCHEDULE
			, CONTENT
			, PLACE
			, NOTE
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.schedule}, #{item.content}, #{item.place}, #{item.note} )
		</foreach>
	</insert>
	
	<select id="selectBusinessTripPlanData" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripPlanData */
		SELECT
			PLAN_IDX
			, TRIP_TYPE
			, CASE 
				WHEN TRIP_TYPE = 'I' THEN '국내'
				WHEN TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, TRIP_DIV
			, CASE 
				WHEN TRIP_DIV = 'T' THEN '출장'
				WHEN TRIP_DIV = 'R' THEN '시장조사'
				END	AS TRIP_DIV_TXT
			, TITLE
			, TRIP_START_DATE
			, TRIP_END_DATE
			, TRIP_TRANSIT
			, TRIP_COST
			, CAL_METHOD
			, TRIP_EFFECT
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO	
		FROM
			lab_business_trip_plan
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}	
	</select>
	
	<select id="selectBusinessTripPlanUserList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripPlanUserList */
		SELECT
			PLAN_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME 
		FROM 
			lab_business_trip_plan_user
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC			
	</select>
	
	<select id="selectBusinessTripPlanAddInfoList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripPlanAddInfoList */
		SELECT
			PLAN_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
			FROM 
			lab_business_trip_plan_add_info
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC	
	</select>
	
	<select id="selectBusinessTripPlanContentsList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripPlanContentsList */
		SELECT
			PLAN_IDX
			, DISPLAY_ORDER
			, SCHEDULE
			, CONTENT
			, PLACE
			, NOTE
			FROM 
			lab_business_trip_plan_contents
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC	
	</select>
	
	
	<update id="updateBusinessTripPlan" parameterType="map">
		/*	report2.updateBusinessTripPlan */
		UPDATE
			lab_business_trip_plan
		SET
			TRIP_TYPE = #{tripType}
			, TRIP_DIV = #{tripDiv}
			, TITLE = #{title}
			, TRIP_START_DATE = #{tripStartDate}
			, TRIP_END_DATE = #{tripEndDate}
			, TRIP_TRANSIT = #{tripTransit}
			, TRIP_COST = #{tripCost}
			, CAL_METHOD = #{calMethod}
			, TRIP_EFFECT = #{tripEffect}
			, STATUS = #{status}
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}	
	</update>
	
	<delete id="deleteBusinessTripPlanUser" parameterType="map">
		/*	report2.deleteBusinessTripPlanUser */
		DELETE
		FROM lab_business_trip_plan_user
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
	</delete>
	
	<delete id="deleteBusinessTripPlanAddInfo" parameterType="map">
		/*	report2.deleteBusinessTripPlanAddInfo */
		DELETE
		FROM lab_business_trip_plan_add_info
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
	</delete>
	
	<delete id="deleteBusinessTripPlanContents" parameterType="map">
		/*	report2.deleteBusinessTripPlanContents */
		DELETE
		FROM lab_business_trip_plan_contents
		WHERE 1 = 1
			AND PLAN_IDX = #{idx}
	</delete>
	
	<select id="selectSenseQualitySeq" resultType="int">
		/*	report2.selectSenseQualitySeq */
		SELECT FN_NEXTVAL('lab_sense_quality_report_seq') as seq
	</select>
	
	<insert id="insertSenseQualityReport" parameterType="map">
		/*	report2.insertSenseQualityReport */
		INSERT INTO lab_sense_quality_report(
			REPORT_IDX
			, TITLE
			, COMPANY_NAME
			, PRODUCT_NAME
			, TEST_PURPOSE
			, CONTENTS_HEADER
			, STATUS
			, IS_DELETE
			, REG_USER
			, REG_DATE			
		)VALUES(
			#{idx}
			, #{title} 
			, #{companyName}
			, #{productName}
			, #{testPurpose}
			, #{contentsHeader}
			, #{status}
			, 'N'
			, #{userId}
			, sysdate()
		)
	</insert>
	
	<insert id="insertSenseQualityContents" parameterType="list">
		/*	report2.insertSenseQualityContents */
		INSERT
		INTO lab_sense_quality_contents(
			CONTENTS_IDX
			, REPORT_IDX
			, DISPLAY_ORDER
			, CONTENTS_DIV
			, CONTENTS_RESULT
			, FILE_NAME
			, ORG_FILE_NAME
			, FILE_PATH
		)values
		<foreach collection="list" item="item" separator=",">
		( FN_NEXTVAL('lab_sense_quality_contents_seq'), #{item.idx}, #{item.displayOrder}, #{item.contentsDiv}, #{item.contentsResult}, #{item.orgFileName}, #{item.changeFileName}, #{item.filePath} )
		</foreach>
	</insert>
	
	<insert id="insertSenseQualityAddInfo" parameterType="list">
		/*	report2.insertSenseQualityAddInfo */
		INSERT
		INTO lab_sense_quality_add_info(
			INFO_IDX
			, REPORT_IDX
			, INFO_TYPE
			, INFO_TEXT
		)values
		<foreach collection="list" item="item" separator=",">
		( FN_NEXTVAL('lab_sense_quality_add_info_seq'), #{item.idx}, #{item.infoType}, #{item.infoText} )
		</foreach>
	</insert>
	
	<sql id="whereSenseQuality">
		<if test="searchType != null and searchType != '' ">
		<choose>
			<when test="searchType.equals('searchName')">
			AND PRODUCT_NAME LIKE CONCAT('%',#{searchValue},'%')
			</when>
      		<when test="searchType.equals('searchTitle')">
      		AND TITLE LIKE CONCAT('%',#{searchValue},'%')
      		</when>
      	</choose>
		</if>
	</sql>
	
	<select id="selectSenseQualityCount" parameterType="map" resultType="int">
	/*	report2.selectSenseQualityCount */
		SELECT
			count(REPORT_IDX) as cnt
		FROM
			lab_sense_quality_report
		WHERE 1 = 1
			AND REG_USER = #{userId}
			AND IS_DELETE = 'N'
			<include refid="report2.whereSenseQuality" />			
	</select>
	
	<select id="selectSenseQualityList" parameterType="map" resultType="hashmap">
		/*	report2.selectSenseQualityList */
		SELECT
			tmp.*
			, FN_GET_USER_NAME(tmp.REG_USER) as REG_USER_NAME
			, CASE 
				WHEN tmp.STATUS = 'TMP' THEN '임시저장'
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  REPORT_IDX DESC) as rnum
				, REPORT_IDX
				, TITLE
				, COMPANY_NAME
				, PRODUCT_NAME
				, TEST_PURPOSE
				, CONTENTS_HEADER
				, IS_DELETE
				, REG_USER
				, REG_DATE
				, STATUS				
			FROM 	
				lab_sense_quality_report
			WHERE 1 = 1
				AND REG_USER = #{userId}
				AND IS_DELETE = 'N'
				<include refid="report2.whereBusinessTripPlan" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}
	</select>
	
	<select id="selectSenseQualityReport" parameterType="map" resultType="hashmap">
		/*	report2.selectSenseQualityReport */
		SELECT
			REPORT_IDX
			, TITLE
			, COMPANY_NAME
			, PRODUCT_NAME
			, TEST_PURPOSE
			, CONTENTS_HEADER
			, IS_DELETE
			, REG_USER
			, REG_DATE
			, STATUS
		FROM 
			lab_sense_quality_report
		WHERE 1 = 1
			AND REPORT_IDX = #{idx}	
	</select>
	
	<select id="selectSenseQualityContensts" parameterType="map" resultType="hashmap">
		/*	report2.selectSenseQualityContensts */
		SELECT
			CONTENTS_IDX
			, REPORT_IDX
			, DISPLAY_ORDER
			, CONTENTS_DIV
			, CONTENTS_RESULT
			, FILE_NAME
			, ORG_FILE_NAME
			, FILE_PATH
		FROM 
			lab_sense_quality_contents
		WHERE 1 = 1
			AND REPORT_IDX = #{idx}	
		ORDER BY DISPLAY_ORDER ASC	
	</select>
	
	<select id="selectSenseQualityInfo" parameterType="map" resultType="hashmap">
		/*	report2.selectSenseQualityInfo */
		SELECT
			INFO_IDX
			, REPORT_IDX
			, INFO_TYPE
			, INFO_TEXT
		FROM 
			lab_sense_quality_add_info
		WHERE 1 = 1
			AND REPORT_IDX = #{idx}	
		<if test="infoType != null and infoType != '' ">
			AND INFO_TYPE = #{infoType}
		</if>	
	</select>
	
	<select id="selectSenseQualityContenstsData" parameterType="map" resultType="hashmap">
		/*	report2.selectSenseQualityContenstsData */
		SELECT
			CONTENTS_IDX
			, REPORT_IDX
			, DISPLAY_ORDER
			, CONTENTS_DIV
			, CONTENTS_RESULT
			, FILE_NAME
			, ORG_FILE_NAME
			, FILE_PATH
		FROM
			lab_sense_quality_contents
		WHERE 1 = 1
			AND CONTENTS_IDX = #{contentsIdx}
	</select>
	
	<delete id="deleteSenseQualityContenstsData" parameterType="map">
		/*	report2.deleteSenseQualityContenstsData */
		DELETE
		FROM 
			lab_sense_quality_contents
		WHERE 1 = 1
			AND CONTENTS_IDX = #{contentsIdx}	
	</delete>
	
	<update id="updateSenseQualityReport"  parameterType="map">
		/*	report2.updateSenseQualityReport */
		UPDATE 
			lab_sense_quality_report
		SET
			TITLE = #{title}
			, COMPANY_NAME = #{companyName}
			, PRODUCT_NAME = #{productName}
			, TEST_PURPOSE = #{testPurpose}
			, CONTENTS_HEADER = #{contentsHeader}
			, STATUS = #{status}
		WHERE 1 = 1
			AND REPORT_IDX = #{idx}
	</update>
	
	<delete id="deleteSenseQualityAddInfo" parameterType="map">
		/*	report2.deleteSenseQualityAddInfo */
		DELETE 
		FROM 
			lab_sense_quality_add_info
		WHERE 1 = 1
			AND REPORT_IDX = #{idx}
	</delete>
	
	<update id="updateSenseQualityContent" parameterType="map">
		/*	report2.updateSenseQualityContent */
		UPDATE
			lab_sense_quality_contents
		SET 
			CONTENTS_DIV = #{contentsDiv}
			, CONTENTS_RESULT = #{contentsResult}
		WHERE 1 = 1
			AND CONTENTS_IDX = #{contentsIdx}
	</update>
	
	<insert id="insertSenseQualityContent" parameterType="map">
		/*	report2.insertSenseQualityContent */
		INSERT
		INTO lab_sense_quality_contents(
			CONTENTS_IDX
			, REPORT_IDX
			, DISPLAY_ORDER
			, CONTENTS_DIV
			, CONTENTS_RESULT
			, FILE_NAME
			, ORG_FILE_NAME
			, FILE_PATH
		)values
		( FN_NEXTVAL('lab_sense_quality_contents_seq'), #{idx}, #{displayOrder}, #{contentsDiv}, #{contentsResult}, #{orgFileName}, #{changeFileName}, #{filePath} )
	</insert>
	
	
	
	<!--  여기부터 시작 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<insert id="insertBusinessTripUser" parameterType="list">
		/*	report2.insertBusinessTripUser */
		INSERT
		INTO lab_business_trip_user(
			TRIP_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.dept}, #{item.position}, #{item.name} )
		</foreach>
	</insert>
	
	<insert id="insertBusinessTripAddInfo" parameterType="list">
		/*	report2.insertBusinessTripAddInfo */
		INSERT
		INTO lab_business_trip_add_info(
			TRIP_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.infoType}, #{item.infoText} )
		</foreach>
	</insert>
	
	<insert id="insertBusinessTripContents" parameterType="list">
		/*	report2.insertBusinessTripContents */
		INSERT
		INTO lab_business_trip_contents(
			TRIP_IDX
			, DISPLAY_ORDER
			, SCHEDULE
			, CONTENT
			, PLACE
			, NOTE
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.schedule}, #{item.content}, #{item.place}, #{item.note} )
		</foreach>
	</insert>
	
	<select id="selectBusinessTripUserList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripUserList */
		SELECT 
			TRIP_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME
		FROM 
			lab_business_trip_user
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC
	</select>
	
	<select id="selectBusinessTripAddInfoList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripAddInfoList */
		SELECT
			TRIP_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
		FROM 
			lab_business_trip_add_info
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC
	</select>
	
	<select id="selectBusinessTripContentsList" parameterType="map" resultType="hashmap">
		/*	report2.selectBusinessTripContentsList */
		SELECT
			TRIP_IDX
			, DISPLAY_ORDER
			, SCHEDULE
			, CONTENT
			, PLACE
			, NOTE
		FROM
			lab_business_trip_contents
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC		
	</select>
	
	<delete id="deleteBusinessTripUser" parameterType="map">
		/*	report2.deleteBusinessTripUser */
		DELETE
		FROM lab_business_trip_user
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
	</delete>
	
	<delete id="deleteBusinessTripAddInfo" parameterType="map">
		/*	report2.deleteBusinessTripAddInfo */
		DELETE
		FROM lab_business_trip_add_info
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
	</delete>
	
	<delete id="deleteBusinessTripContents" parameterType="map">
		/*	report2.deleteBusinessTripContents */
		DELETE
		FROM lab_business_trip_contents
		WHERE 1 = 1
			AND TRIP_IDX = #{idx}
	</delete>
	
	<select id="selectNewProductResultCount" parameterType="map" resultType="int">
	/*	report2.selectNewProductResultCount */
		SELECT
			COUNT(RESULT_IDX) as cnt
		FROM 	
			lab_new_product_result
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			AND IS_DELETE = 'N'
			<include refid="report2.whereNewProductResultList" />
	</select>
	
	<select id="selectNewProductResultList" parameterType="map" resultType="hashmap">
	/*	report2.selectNewProductResultList */
		SELECT
			tmp.*
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  RESULT_IDX DESC) as rnum
				, RESULT_IDX
				, TITLE
				, IS_DELETE
				, STATUS
				, REG_USER
				, DOC_OWNER
			FROM 	
				lab_new_product_result
			WHERE 1 = 1
				AND DOC_OWNER = #{userId}
				AND IS_DELETE = 'N'
				<include refid="report2.whereNewProductResultList" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}		
	</select>
	
	<sql id="whereChemicalTestList">
	    <if test="searchType != null and searchType != '' ">
	        <choose>
	            <when test="searchType == 'searchProduct'">
	                AND PRODUCT_NAME LIKE CONCAT('%', #{searchValue}, '%')
	            </when>
	            <when test="searchType == 'searchRequestUser'">
	                AND REQUEST_USER LIKE CONCAT('%', #{searchValue}, '%')
	            </when>
	            <when test="searchType == 'searchStandardContent'">
	                AND STANDARD_CONTENT LIKE CONCAT('%', #{searchValue}, '%')
	            </when>
	            <when test="searchType == 'searchRequsetContent'">
	                AND REQUEST_CONTENT LIKE CONCAT('%', #{searchValue}, '%')
	            </when>
	        </choose>
	    </if>
	
	    <if test="requestDate != null and requestDate != '' ">
	        AND DATE(REQUEST_DATE) = #{requestDate}
	    </if>
	
	    <if test="completeDate != null and completeDate != '' ">
	        AND DATE(COMPLETION_DATE) = #{completeDate}
	    </if>
	
	    <if test="searchFileTxt != null and searchFileTxt != '' ">
	        AND CHEMICAL_IDX IN (
	            SELECT DISTINCT DOC_IDX
	            FROM lab_file
	            WHERE DOC_TYPE = 'CHEMICAL' 
	              AND FILE_CONTENT LIKE CONCAT('%', #{searchFileTxt}, '%')
	        )
	    </if>
	</sql>
	
	<select id="selectChemicalTestCount" parameterType="map" resultType="int">
	/*	report2.selectChemicalTestCount */
		SELECT
			COUNT(CHEMICAL_IDX) as cnt
		FROM 	
			lab_chemical_test
		WHERE 1 = 1
			AND DOC_OWNER = #{userId}
			AND IS_DELETE = 'N'
			<include refid="report2.whereChemicalTestList" />
	</select>
	
	<select id="selectChemicalTestList" parameterType="map" resultType="hashmap">
	/*	report2.selectChemicalTestList */
		SELECT
			tmp.*
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'TMP' THEN '임시저장'
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  CHEMICAL_IDX DESC) as rnum
				, CHEMICAL_IDX
				, REQUEST_DATE
				, COMPLETION_DATE
				, REQUEST_USER
				, PRODUCT_CODE
				, PRODUCT_NAME
				, SAP_CODE
				, PRESERVATION
				, STANDARD_CONTENT
				, REQUEST_CONTENT
				, IS_DELETE
				, STATUS
				, DOC_OWNER
			FROM 	
				lab_chemical_test
			WHERE 1 = 1
				AND DOC_OWNER = #{userId}
				AND IS_DELETE = 'N'
				<include refid="report2.whereChemicalTestList" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}		
	</select>
	
	
	<select id="selectMarketResearchSeq" resultType="int">
		/*	report2.selectMarketResearchSeq */
		SELECT FN_NEXTVAL('lab_market_research_seq') as seq
	</select>
	
	<insert id="insertMarketResearch" parameterType="map">
		/*	report2.insertMarketResearch */
		INSERT INTO lab_market_research(
			RESEARCH_IDX
			, PLAN_IDX
			, TITLE
			, TRIP_TYPE
			, RESEARCH_DATE
			, COST
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_LAST
			, IS_DELETE
			, VERSION_NO
		)VALUES(
			#{idx}
			, #{planIdx}
			, #{title}
			, #{tripType}
			, #{researchDate}
			, #{cost}
			, #{userId}
			, #{userId}
			, #{status}
			, 'Y'
			, 'N'
			, 1		
		)
	</insert>
	
	<insert id="insertMarketResearchAddInfo" parameterType="list">
		/*	report2.insertMarketResearchAddInfo */
		INSERT
		INTO lab_market_research_add_info(
			RESEARCH_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.infoType}, #{item.infoText} )
		</foreach>
	</insert>
	
	<insert id="insertMarketResearchUser" parameterType="list">
		/*	report2.insertMarketResearchUser */
		INSERT
		INTO lab_market_research_user(
			RESEARCH_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME
		)values
		<foreach collection="list" item="item" separator=",">
		( #{item.idx}, #{item.displayOrder}, #{item.dept}, #{item.position}, #{item.name} )
		</foreach>
	</insert>
	
	<sql id="whereMarketResearch">
		<if test="searchType != null and searchType != '' ">
		<choose>
      		<when test="searchType.equals('searchTitle')">
      		AND TITLE LIKE CONCAT('%',#{searchValue},'%')
      		</when>
      	</choose>
		</if>
	</sql>
	
	<select id="selectMarketResearchCount" parameterType="map" resultType="int">
	/*	report2.selectMarketResearchCount */
		SELECT
			count(RESEARCH_IDX) as cnt
		FROM
			lab_market_research
		WHERE 1 = 1
			AND REG_USER = #{userId}
			AND IS_DELETE = 'N'
			<include refid="report2.whereMarketResearch" />			
	</select>
	
	<select id="selectMarketResearchList" parameterType="map" resultType="hashmap">
		/*	report2.selectMarketResearchList */
		SELECT
			tmp.*
			, CASE 
				WHEN tmp.TRIP_TYPE = 'I' THEN '국내'
				WHEN tmp.TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, FN_GET_USER_NAME(tmp.REG_USER) as REG_USER_NAME
			, FN_GET_USER_NAME(tmp.DOC_OWNER) as DOC_OWNER_NAME
			, CASE 
				WHEN tmp.STATUS = 'TMP' THEN '임시저장'
				WHEN tmp.STATUS = 'REG' THEN '등록'
				WHEN tmp.STATUS = 'APPR' THEN '결재중'
				WHEN tmp.STATUS = 'COMP' THEN '완료'
				WHEN tmp.STATUS = 'COND_APPR' THEN '부분승인'
				END	AS STATUS_TXT
		FROM
		(	
			SELECT
				row_number() over (order by  RESEARCH_IDX DESC) as rnum
				, RESEARCH_IDX
				, PLAN_IDX
				, TRIP_TYPE
				, TITLE
				, RESEARCH_DATE
				, COST
				, REG_USER
				, DOC_OWNER
				, STATUS
				, IS_DELETE
				, VERSION_NO
				, IS_LAST				
			FROM 	
				lab_market_research
			WHERE 1 = 1
				AND REG_USER = #{userId}
				AND IS_DELETE = 'N'
				<include refid="report2.whereMarketResearch" />
		)tmp
		WHERE rnum between #{startRow} and #{endRow}
	</select>
	
	<select id="selectMarketResearchData" parameterType="map" resultType="hashmap">
		/*	report2.selectMarketResearchData */
		SELECT
			RESEARCH_IDX
			, PLAN_IDX
			, TITLE
			, TRIP_TYPE
			, CASE 
				WHEN TRIP_TYPE = 'I' THEN '국내'
				WHEN TRIP_TYPE = 'O' THEN '해외'
				END	AS TRIP_TYPE_TXT
			, RESEARCH_DATE
			, COST
			, REG_USER
			, DOC_OWNER
			, STATUS
			, IS_DELETE
			, VERSION_NO
			, IS_LAST			
		FROM 
			lab_market_research
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}
	</select>
	
	<select id="selectMarketResearchUserList" parameterType="map" resultType="hashmap">
		/*	report2.selectMarketResearchUserList */
		SELECT
			RESEARCH_IDX
			, DISPLAY_ORDER
			, DEPT
			, POSITION
			, NAME
		FROM
			lab_market_research_user
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC	
	</select>
	
	<select id="selectMarketResearchAddInfoList" parameterType="map" resultType="hashmap">
		/*	report2.selectMarketResearchAddInfoList */
		SELECT
			RESEARCH_IDX
			, DISPLAY_ORDER
			, INFO_TYPE
			, INFO_TEXT
		FROM
			lab_market_research_add_info
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}
		ORDER BY DISPLAY_ORDER ASC		
	</select>
	
	<update id="updateMarketResearch" parameterType="map">
		/*	report2.selectMarketResearchAddInfoList */
		UPDATE 
			lab_market_research
		SET
			PLAN_IDX = #{planIdx}
			, TITLE = #{title}	
			, TRIP_TYPE = = #{tripType}	
			, RESEARCH_DATE = #{researchDate}	
			, COST = #{cost}	
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}	
	</update>
	
	<delete id="deleteMarketResearchAddInfo" parameterType="map">
		/*	report2.deleteMarketResearchAddInfo */
		DELETE
		FROM lab_market_research_add_info
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}
	</delete>
	
	<delete id="deleteMarketResearchUser" parameterType="map">
		/*	report2.deleteMarketResearchUser */
		DELETE
		FROM lab_market_research_user
		WHERE 1 = 1
			AND RESEARCH_IDX = #{idx}
	</delete>
</mapper>